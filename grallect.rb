#!/usr/bin/env ruby


require 'open-uri'
require 'pp'
require 'uri'

# this should be generated by merging together defaults and a configuration file
config = { 
  :graphite => { :url => 'http://localhost' },
  :collectd => { :prefix => "collectd", :postfix => nil, :escape_character => '_', :interval => 10 },
  :cpu => { :count => 8, :warning => 0.2, :critical => 0.4, :interval => 60 },
}

# this should be generated by command line arguments
config[:command] = 'cpu'
config[:host] = 'example.com'

config[:host].gsub!('.', config[:collectd][:escape_character])

def check_cpu(config)
  warning = []
  critical = []
  range = (0..config[:cpu][:count]-1)
  window = config[:cpu][:interval] / config[:collectd][:interval]

  range.each do |i|
    url = URI.escape("#{config[:graphite][:url]}/render/?format=raw&target=movingAverage(#{config[:host]}.collectd.cpu-#{i}.cpu-system,#{window})&from=-#{config[:cpu][:interval]}seconds")
    value = open(url).read.chomp!.rpartition(',').last.to_f
    url = URI.escape("#{config[:graphite][:url]}/render/?format=raw&target=movingAverage(#{config[:host]}.collectd.cpu-#{i}.cpu-user,#{window})&from=-#{config[:cpu][:interval]}seconds")
    value = value + open(url).read.chomp!.rpartition(',').last.to_f
    if value >= config[:cpu][:warning] and value < config[:cpu][:critical]
      warning.push [i, value]
    elsif value >= config[:cpu][:critical]
      critical.push [i, value]
    end
  end

  if not critical.empty?
    pp critical
    output = 'CRITICAL: '
    code = 2
  elsif not warning.empty?
    pp warning
    output = 'WARNING: '
    code = 1
  else
    output = 'OK: CPU averages below threshholds'
    code = 0
  end

  critical.each { |c| output = output + "CPU #{c.first} averaged #{c.last}%. " }
  warning.each { |c| output = output + "CPU #{c.first} averaged #{c.last}%. " }

  puts output
  return code

end

case config[:command]
when 'cpu'
  check_cpu(config)
else
  puts 'What kind of command is that?'
end

